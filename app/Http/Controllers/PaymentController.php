<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Services\SquareService;
use Illuminate\Support\Facades\Log; // Import the Log facade for logging
use Square\SquareClient;
use Square\Models\Money;
use Square\Models\CreatePaymentRequest;
use Square\Exceptions\ApiException;
use App\Models\Payment;
use App\Models\Order;

class PaymentController extends Controller
{
    protected $squareService;

    // Dependency injection of the SquareService
    public function __construct(SquareService $squareService)
    {
        $this->squareService = $squareService;
    }
    public function showCheckout()
    {
        // Retrieve the cart data from the session
        $cart = session()->get('cart', []);

        // Check if $cart is null or if totalAmount key is not set
        // if (is_null($cart) || !isset($cart['totalAmount'])) {
        //     // Set a default value for totalAmount or handle the missing cart data as needed
        //     // For example, you can redirect back with an error message
        //     return redirect()->back()->withErrors('Cart data is missing or invalid.');
        // }

        // If the cart data is valid, continue with displaying the checkout page
        return view('checkout.show', compact('cart'));
    }

    public function processPayment(Request $request)
    {
        // Dump the request data to see what is being received
        dd($request->all());
        \Log::debug('Processing payment', $request->all());
        var_dump($request->all());

        // Retrieve the payment nonce from the request
        $nonce = $request->input('nonce');
        if (is_null($nonce)) {
            // Immediately return an error response if the nonce is missing
            return response()->json(['error' => 'Payment information is missing.']);
        }

        // Set up the Square client
        $client = new SquareClient([
            'accessToken' => config('services.square.access_token'),
            'environment' => \Square\Environment::SANDBOX,
        ]);

        // Define the payment amount and currency
        $amountMoney = new Money();
        $amountMoney->setAmount(100); // Example amount in smallest currency unit (e.g., cents)
        $amountMoney->setCurrency('CHF');

        // Create the payment request
        $paymentBody = new CreatePaymentRequest(
            $nonce,
            uniqid(), // A unique ID for the transaction
            $amountMoney
        );

        try {
            // Attempt to process the payment with Square
            $result = $client->getPaymentsApi()->createPayment($paymentBody);

            if ($result->isSuccess()) {
                $paymentResult = $result->getResult()->getPayment();

                // Example: Store payment details in the database
                // Ensure you replace `$orderId` with how you retrieve the actual order ID in your app
                $orderId = $this->getOrderId($request); // You'll need to implement this method

                Payment::create([
                    'order_id' => $orderId,
                    'amount' => $paymentResult->getAmountMoney()->getAmount(),
                    'status' => 'Completed', // Example status
                    'payment_method' => 'Square',
                ]);

                // Optionally, update the order status in your database
                $order = Order::find($orderId);
                if ($order) {
                    $order->update(['status' => 'Paid']);
                }

                return response()->json(['status' => 'success', 'message' => 'Payment processed successfully']);
            } else {
                // Handle the case where Square returned errors
                return response()->json(['status' => 'error', 'message' => $result->getErrors()]);
            }

        } catch (ApiException $e) {
            // Handle any exceptions thrown during the payment process
            return response()->json(['status' => 'exception', 'message' => $e->getMessage()]);
        }
    }
}

// {
//     $amount = $request->amount; // Ensure this is in minor units (e.g., cents)
//     $nonce = $request->nonce; // Nonce from the payment form
//     $billingAddress = $request->input('billing_address');

//     $paymentResult = $this->squareService->createPayment($amount, $nonce);

//     if (isset($paymentResult['error'])) {
//         return back()->withErrors('Payment failed: ' . $paymentResult['error']);
//     }

//     // Handle successful payment (e.g., save order details, clear cart)
//     return redirect()->route('home')->with('success', 'Payment successful!');
// }
// public function processPayment(Request $request)
// {
//     $amount = $request->amount * 100; // Convert to smallest currency unit, e.g., cents for USD
//     $nonce = $request->nonce; // Payment token generated by Square Web Payments SDK
//     $idempotencyKey = uniqid(); // Generate a unique idempotency key

//     // Attempt to process the payment
//     $result = $this->squareService->createPayment($amount, $nonce, $idempotencyKey);

//     if ($result && isset($result['payment'])) {
//         // Assuming createPayment returns an array with a 'payment' key on success
//         // Handle successful payment (e.g., save order details to database, clear cart)
//         session()->forget('cart');
//         return redirect()->route('home')->with('success', 'Payment successful and order placed!');
//     } else {
//         // Log the error for debugging
//         Log::error('Payment failed', ['result' => $result]);
//         // Handle payment failure
//         return back()->withErrors('Payment failed. Please try again.');
//     }
// }