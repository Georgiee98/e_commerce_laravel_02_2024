<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Services\SquareService;
use Illuminate\Support\Facades\Log; // Import the Log facade for logging

class PaymentController extends Controller
{
    protected $squareService;

    // Dependency injection of the SquareService
    public function __construct(SquareService $squareService)
    {
        $this->squareService = $squareService;
    }
    public function showCheckout()
    {
        // Retrieve the cart data from the session
        $cart = session()->get('cart', []);

        // Check if $cart is null or if totalAmount key is not set
        // if (is_null($cart) || !isset($cart['totalAmount'])) {
        //     // Set a default value for totalAmount or handle the missing cart data as needed
        //     // For example, you can redirect back with an error message
        //     return redirect()->back()->withErrors('Cart data is missing or invalid.');
        // }

        // If the cart data is valid, continue with displaying the checkout page
        return view('checkout.show', compact('cart'));
    }

    public function processPayment(Request $request)
    {

        $nonce = $request->input('nonce'); // The nonce from Square's payment form
        // Assuming $amount and other necessary data are determined from the session or form input
        $amount = 1000; // Example amount in cents

        // Process payment through Square
        $result = $this->squareService->createPayment($amount, $nonce, uniqid());

        if ($result['success']) {
            // Handle successful payment
            session()->forget('cart');
            return redirect()->route('order.success'); // Redirect to a successful order page
        } else {
            // Handle payment failure
            return back()->withErrors('Payment failed. Please try again.');
        }
    }

    // {
    //     $amount = $request->amount; // Ensure this is in minor units (e.g., cents)
    //     $nonce = $request->nonce; // Nonce from the payment form
    //     $billingAddress = $request->input('billing_address');

    //     $paymentResult = $this->squareService->createPayment($amount, $nonce);

    //     if (isset($paymentResult['error'])) {
    //         return back()->withErrors('Payment failed: ' . $paymentResult['error']);
    //     }

    //     // Handle successful payment (e.g., save order details, clear cart)
    //     return redirect()->route('home')->with('success', 'Payment successful!');
    // }
    // public function processPayment(Request $request)
    // {
    //     $amount = $request->amount * 100; // Convert to smallest currency unit, e.g., cents for USD
    //     $nonce = $request->nonce; // Payment token generated by Square Web Payments SDK
    //     $idempotencyKey = uniqid(); // Generate a unique idempotency key

    //     // Attempt to process the payment
    //     $result = $this->squareService->createPayment($amount, $nonce, $idempotencyKey);

    //     if ($result && isset($result['payment'])) {
    //         // Assuming createPayment returns an array with a 'payment' key on success
    //         // Handle successful payment (e.g., save order details to database, clear cart)
    //         session()->forget('cart');
    //         return redirect()->route('home')->with('success', 'Payment successful and order placed!');
    //     } else {
    //         // Log the error for debugging
    //         Log::error('Payment failed', ['result' => $result]);
    //         // Handle payment failure
    //         return back()->withErrors('Payment failed. Please try again.');
    //     }
    // }
}